{"ast":null,"code":"var _jsxFileName = \"/Users/dana/Downloads/NTU/Ascendo/frontend/src/CameraFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CameraFeeds() {\n  _s();\n  const [image1, setImage1] = useState(null);\n  const [image2, setImage2] = useState(null);\n  const [image3, setImage3] = useState(null);\n  useEffect(() => {\n    const fetchData = async (_cameraNumber, setImage) => {\n      try {\n        const response = await fetch('http://<RPI_IP_ADD>:5000/video_feed_$(cameraNumber'); // Replace with Raspberry Pi IP\n        const blob = await response.blob();\n        const imageUrl = URL.createObjectURL(blob);\n        setImage(imageUrl);\n      } catch (error) {\n        console.error('Error fetching camera ${cameraNumber}feed:', error);\n      }\n    };\n\n    // Fetch every 100ms for near real-time updates\n    const intervalId = setInterval(fetchData, 100);\n    return () => clearInterval(intervalId); // Cleanup on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Robot Camera Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), image ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Robot Camera Feed\",\n      style: {\n        width: \"80%\",\n        border: \"1px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading camera feed...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(CameraFeeds, \"ohNWiaPHuOmSljHkhI5pRl1t5rs=\");\n_c = CameraFeeds;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeeds\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CameraFeeds","_s","image1","setImage1","image2","setImage2","image3","setImage3","fetchData","_cameraNumber","setImage","response","fetch","blob","imageUrl","URL","createObjectURL","error","console","intervalId","setInterval","clearInterval","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","image","src","alt","width","border","_c","CameraFeed","$RefreshReg$"],"sources":["/Users/dana/Downloads/NTU/Ascendo/frontend/src/CameraFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction CameraFeeds() {\n  const [image1, setImage1] = useState(null);\n  const [image2, setImage2] = useState(null);\n  const [image3, setImage3] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async (_cameraNumber, setImage) => {\n      try {\n        const response = await fetch('http://<RPI_IP_ADD>:5000/video_feed_$(cameraNumber'); // Replace with Raspberry Pi IP\n        const blob = await response.blob();\n        const imageUrl = URL.createObjectURL(blob);\n        setImage(imageUrl);\n      } catch (error) {\n        console.error('Error fetching camera ${cameraNumber}feed:', error);\n      }\n    };\n\n    // Fetch every 100ms for near real-time updates\n    const intervalId = setInterval(fetchData, 100);\n\n    return () => clearInterval(intervalId); // Cleanup on unmount\n  }, []);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Robot Camera Feed</h1>\n      {image ? (\n        <img\n          src={image}\n          alt=\"Robot Camera Feed\"\n          style={{ width: \"80%\", border: \"1px solid black\" }}\n        />\n      ) : (\n        <p>Loading camera feed...</p>\n      )}\n    </div>\n  );\n}\n\nexport default CameraFeed;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAOC,aAAa,EAAEC,QAAQ,KAAK;MACnD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC,CAAC,CAAC;QACpF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;QAC1CH,QAAQ,CAACI,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACpE;IACF,CAAC;;IAED;IACA,MAAME,UAAU,GAAGC,WAAW,CAACZ,SAAS,EAAE,GAAG,CAAC;IAE9C,OAAO,MAAMa,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAKuB,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClCzB,OAAA;MAAAyB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBC,KAAK,gBACJ9B,OAAA;MACE+B,GAAG,EAAED,KAAM;MACXE,GAAG,EAAC,mBAAmB;MACvBT,KAAK,EAAE;QAAEU,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAkB;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,gBAEF7B,OAAA;MAAAyB,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC7B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3B,EAAA,CArCQD,WAAW;AAAAkC,EAAA,GAAXlC,WAAW;AAuCpB,eAAemC,UAAU;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}